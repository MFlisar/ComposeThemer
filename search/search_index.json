{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"ComposeThemer <p>This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>allows to define custom user themes and applies them automatically</li> <li>ability to retrieve all registered themes</li> <li>supports system ui theming (status bar + navigation bar)</li> <li>build on top of <code>MaterialTheme</code></li> <li>supports dynamic theming as well as system and user contrast settings</li> <li>comes with optional collections of predefined themes<ul> <li>metro colors based theme collection</li> <li>flat UI based theme collection</li> <li>material 500 colors based theme collection</li> </ul> </li> <li>offers some edgeToEdge helper functions</li> </ul> <p>Info</p> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"#screenshots","title":"Screenshots","text":"Picker Android Picker Desktop"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library and the provided modules do support following platforms.</p> Module android ios windows macos wasm Info Core <code>core</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  Modules <code>modules-picker</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>modules-defaultpicker</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  Themes <code>themes-flatui</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>themes-material500</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>themes-metro</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714"},{"location":"#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"compatibility/","title":"Compatibility","text":"<p>Information about the compatibility of this library with all my other libraries can be found here.</p>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Jetbrains Compose Multiplatform <code>1.8.2</code> Depends on jetpack (androidx) compose <code>1.8.2</code> Jetbrains Material 3 <code>1.8.2</code> Depends on jetpack (androidx) material3 <code>1.3.2</code> <p>More details about the jetpack dependencies can be found in JetBrains Release Notes.</p>"},{"location":"dependencies/#modules","title":"Modules","text":"Module Dependency Version Core <code>core</code> - Modules <code>modules-picker</code> - <code>modules-defaultpicker</code> - Themes <code>themes-flatui</code> - <code>themes-material500</code> - <code>themes-metro</code> -"},{"location":"me/","title":"About Me","text":""},{"location":"me/#about-me","title":"About Me","text":"<p>Check out my main homepage to get an impression of what I do and my open source libraries, android apps and garmin watchfaces that I've developed.</p> <p>https://mflisar.github.io/</p>"},{"location":"other-libraries/","title":"Other Libraries","text":""},{"location":"other-libraries/#other-libraries","title":"Other Libraries","text":"<p>Here you can find an overview of my main libraries that do all play well together including some short descriptions.</p> Utilities Library Description CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries Library Description KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 7. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Lumberjack This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device. Compose Image Library Description ComposeChangelog This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation. ComposeColors A simple collection of colors that can be used inside any KMP compose project. ComposeDebugDrawer This library offers you a simple and easily extendable debug drawer. ComposeDialogs A compose framework for modal dialogs. ComposePreferences This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences. Unofficial Projects Library Description kmp-parcelize a kmp parcelize library that allows you to use the `@Parcelize` annotation in your kmp projects kmp-library a collection of gradle plugins for my demo projects as well as for my own apps kmp-democomposables a collection of composables that I use for my demo projects Toolbox My personal toolbox library"},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val composethemer = \"&lt;LATEST-VERSION&gt;\"\n\n// core\nimplementation(\"io.github.mflisar.composethemer:core:$composethemer\")\n\n// Modules\nimplementation(\"io.github.mflisar.composethemer:modules-picker:$composethemer\")\nimplementation(\"io.github.mflisar.composethemer:modules-defaultpicker:$composethemer\")\n\n// Themes\nimplementation(\"io.github.mflisar.composethemer:themes-flatui:$composethemer\")\nimplementation(\"io.github.mflisar.composethemer:themes-material500:$composethemer\")\nimplementation(\"io.github.mflisar.composethemer:themes-metro:$composethemer\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\n\ncomposethemer = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\n\n# core\ncomposethemer-core = { module = \"io.github.mflisar.composethemer:core\", version.ref = \"composethemer\" }\n\n# Modules\ncomposethemer-modules-picker = { module = \"io.github.mflisar.composethemer:modules-picker\", version.ref = \"composethemer\" }\ncomposethemer-modules-defaultpicker = { module = \"io.github.mflisar.composethemer:modules-defaultpicker\", version.ref = \"composethemer\" }\n\n# Themes\ncomposethemer-themes-flatui = { module = \"io.github.mflisar.composethemer:themes-flatui\", version.ref = \"composethemer\" }\ncomposethemer-themes-material500 = { module = \"io.github.mflisar.composethemer:themes-material500\", version.ref = \"composethemer\" }\ncomposethemer-themes-metro = { module = \"io.github.mflisar.composethemer:themes-metro\", version.ref = \"composethemer\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code># core\nimplementation(libs.composethemer.core)\n\n# Modules\nimplementation(libs.composethemer.modules.picker)\nimplementation(libs.composethemer.modules.defaultpicker)\n\n# Themes\nimplementation(libs.composethemer.themes.flatui)\nimplementation(libs.composethemer.themes.material500)\nimplementation(libs.composethemer.themes.metro)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#1-register-available-themes","title":"1) Register available themes","text":"<p>You should do this once only, e.g. in your <code>Application</code> class.</p> <pre><code>// register all themes that you want to use (our just a subset of them, even a single one is enough)\nval allThemes: List&lt;ComposeTheme.Theme&gt; =\n    DefaultThemes.getAllThemes() +\n            MetroThemes.getAllThemes() +\n            FlatUIThemes.getAllThemes() +\n            Material500Themes.getAllThemes()\nComposeTheme.register(*allThemes.toTypedArray())\n</code></pre>"},{"location":"usage/#2-apply-the-theme","title":"2) Apply the theme","text":"<pre><code>// create a state that holds the current theme settings\nval baseTheme = rememberSaveable { mutableStateOf(ComposeTheme.BaseTheme.System) }\nval contrast = rememberSaveable { mutableStateOf(ComposeTheme.Contrast.Normal) }\nval dynamic = rememberSaveable { mutableStateOf(false) }\nval theme = rememberSaveable { mutableStateOf(ThemeDefault.Theme.id) } // id of the current theme\nval state = ComposeTheme.State(baseTheme, contrast, dynamic, theme)\n\n// use ComposeTheme instead of MaterialTheme\nComposeTheme(state = state) {\n    // app content\n}\n</code></pre>"},{"location":"usage/#3-navigation-and-statusbar-theming","title":"3) Navigation and statusbar theming","text":"<p>On android you can use <code>ComposeTheme</code> to set the status bar and navigation bar colors based on the current theme.</p> <pre><code>ComposeTheme(\n    state = state\n) {\n    // set the color that you use behind the status bar and navigation bar (e.g. primary toolbar + surface bottom navigation)\n    val statusBarColor = ...\n    val navigationBarColor = ...\n\n    // UpdateEdgeToEdgeDefault...helper function to easily enable edgeToEdge\n    // SystemBarStyle also offers some extensions (statusBar, navigationBar, transparent) that can be used\n\n    // this app draws a bottom navigation behind the navigation bar in portrait only, in landscape mode it doesn't\n    val landscape = LocalConfiguration.current.orientation == Configuration.ORIENTATION_LANDSCAPE\n    val isDark = state.base.value.isDark()\n\n    UpdateEdgeToEdgeDefault(\n        activity = this,\n        themeState = state,\n        statusBarColor = statusBarColor,\n        navigationBarColor = if (landscape) {\n            SystemBarStyle.defaultScrim(resources, isDark)\n        } else navigationBarColor,\n        isNavigationBarContrastEnforced = landscape\n    )\n}\n</code></pre>"},{"location":"modules/default-picker/","title":"Default Picker","text":"<p>This module provides a default theme picker ui implementation.</p>"},{"location":"modules/picker/","title":"Picker","text":"<p>This module provides a theme picker UI elements to create your own theme picker.</p> <p>Check out the code of the DefaultThemePicker - it uses all the available elements to create a picker UI.</p>"},{"location":"themes/flat-ui/","title":"Flat UI","text":"<p>I took all 20 colors from the Flat UI color palette and created themes based on them.</p> <p>With the help of this homepage I generated matching colors of following types:</p> <ul> <li>analogic</li> <li>mono</li> <li>tetrade</li> <li>triade</li> </ul> <p>Then I took the first 3 colors and put them into the material theme builder and use the \"color match\" preference.</p> <p>The results are 20 theme colors each in 4 different variants leading to 80 themes in total.</p>"},{"location":"themes/material-500/","title":"Material 500","text":"<p>I took all 19 500 colors from the Material 500 color palette and created themes based on them.</p> <p>With the help of this homepage I generated matching colors of following types:</p> <ul> <li>analogic</li> <li>mono</li> <li>tetrade</li> <li>triade</li> </ul> <p>Then I took the first 3 colors and put them into the material theme builder and use the \"color match\" preference.</p> <p>The results are 19 theme colors each in 4 different variants leading to 76 themes in total.</p>"},{"location":"themes/metro/","title":"Metro","text":"<p>I took all 20 colors from the Metro color palette and created themes based on them.</p> <p>With the help of this homepage I generated matching colors of following types:</p> <ul> <li>analogic</li> <li>mono</li> <li>tetrade</li> <li>triade</li> </ul> <p>Then I took the first 3 colors and put them into the material theme builder and use the \"color match\" preference.</p> <p>The results are 20 theme colors each in 4 different variants leading to 80 themes in total.</p>"}]}